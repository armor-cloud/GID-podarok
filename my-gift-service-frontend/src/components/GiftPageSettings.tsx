import React, { useEffect, useState } from 'react';
import axios from 'axios';

interface GiftPageSettingsData {
  showTimer: boolean;
  timerTitle: string;
  showWheel: boolean;
  showTasks: boolean;
  showFooter: boolean;
}

const defaultSettings: GiftPageSettingsData = {
  showTimer: true,
  timerTitle: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ 5 –º–∏–Ω—É—Ç',
  showWheel: true,
  showTasks: true,
  showFooter: true,
};

const GiftPageSettings: React.FC = () => {
  const [settings, setSettings] = useState<GiftPageSettingsData>(defaultSettings);
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState('');
  const [error, setError] = useState('');

  useEffect(() => {
    fetchSettings();
  }, []);

  const fetchSettings = async () => {
    try {
      setLoading(true);
      const res = await axios.get('/api/settings');
      setSettings(res.data);
    } catch {
      // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
      setSettings(defaultSettings);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, type, checked, value } = e.target;
    setSettings(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value,
    }));
  };

  const handleSave = async () => {
    setLoading(true);
    setSuccess('');
    setError('');
    try {
      await axios.put('/api/settings', settings);
      setSuccess('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
    } catch {
      setError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="giftpage-panel">
      <h2 style={{display: 'flex', alignItems: 'center', gap: 12}}>
        <span style={{fontSize: 28, color: '#1976d2'}}>üéÅ</span>
        –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
      </h2>
      {loading && <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>}
      {error && <div style={{color: 'red', marginBottom: 10}}>{error}</div>}
      {success && <div style={{color: 'green', marginBottom: 10}}>{success}</div>}
      <div style={{marginBottom: 18, display: 'flex', flexDirection: 'column', gap: 16}}>
        <label className="switch-label">
          <span className="switch">
            <input type="checkbox" name="showTimer" checked={settings.showTimer} onChange={handleChange} />
            <span className="slider round"></span>
          </span>
          <span>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–∞–π–º–µ—Ä</span>
        </label>
        <label className="switch-label">
          <span className="switch">
            <input type="checkbox" name="showWheel" checked={settings.showWheel} onChange={handleChange} />
            <span className="slider round"></span>
          </span>
          <span>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã</span>
        </label>
        <label className="switch-label">
          <span className="switch">
            <input type="checkbox" name="showTasks" checked={settings.showTasks} onChange={handleChange} />
            <span className="slider round"></span>
          </span>
          <span>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è</span>
        </label>
        <label className="switch-label">
          <span className="switch">
            <input type="checkbox" name="showFooter" checked={settings.showFooter} onChange={handleChange} />
            <span className="slider round"></span>
          </span>
          <span>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ—É—Ç–µ—Ä</span>
        </label>
      </div>
      <button onClick={handleSave} disabled={loading} style={{background: 'linear-gradient(90deg,#1976d2 60%,#42a5f5 100%)', color: '#fff', fontWeight: 900, border: 'none', borderRadius: 12, padding: '14px 36px', fontSize: '1.1em', cursor: 'pointer', boxShadow: '0 2px 12px rgba(33,150,243,0.13)'}}>
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
      </button>
    </div>
  );
};

export default GiftPageSettings; 